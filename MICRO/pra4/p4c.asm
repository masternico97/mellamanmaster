;*******************************************************************************
; PRACTICA 4 APARTADO C
; SISTEMAS BASADOS EN MICROPROCESADORES
; AUTORES: ALVARO SANCHEZ Y NICOLAS SERRANO
; PAREJA 10
;*******************************************************************************


; DEFINICION DEL SEGMENTO DE DATOS

DATOS SEGMENT

  CLR_PANT 	DB 	1BH,"[2","J$"
  NUM_P DB 31H
  FIRST_LET DB 65 ;LETRA A(ASCII)
  LAST_LET DB 91 ;LETRA Z+1(ASCII)
  INI_NUM DB 48 ;NUMERO 0(ASCII)
  FIRST_NUM DB 49 ;NUMERO 1(ASCII)
  LAST_NUM DB 58 ;NUMERO 9+1(ASCII)
  INSTRUCCION DB 1BH,"[8;1 Introduzca decod para decodificar, cod para codificar o quit para salir: $"
  ERROR DB 1BH,"[6;1 Error al introducir la cadena por parametro: $"
  CADENA DB 100 dup(?)

DATOS ENDS


; DEFINICION DEL SEGMENTO DE PILA

PILA SEGMENT STACK "STACK"
  DB   40H DUP (0)
PILA ENDS


; DEFINICION DEL SEGMENTO EXTRA

EXTRA SEGMENT
EXTRA ENDS


; DEFINICION DEL SEGMENTO DE CODIGO

CODE SEGMENT
  ASSUME CS:CODE, DS:DATOS, ES: EXTRA, SS:PILA

; COMIENZO DEL PROCEDIMIENTO PRINCIPAL

START PROC
    ;INICIALIZA LOS REGISTROS DE SEGMENTO CON SUS VALORES
  MOV AX, DATOS
  MOV DS, AX

  MOV AX, PILA
  MOV SS, AX

  MOV AX, EXTRA
  MOV ES, AX

  ;FIN DE LAS INICIALIZACIONES

  ;COMIENZO DEL PROGRAMA
	MOV AH,9	; BORRA LA PANTALLA
	MOV DX, OFFSET CLR_PANT
	INT 21H

  MOV CH, 0 ;CONTADOR DE LINEAS
  MOV AL, 31H
  MOV BL, FIRST_NUM ;AL SER LA PAREJA 10, LA PRIMERA POSICION LA OCUPA EL NUMERO 1
                  ;CUYO ASCII = 49

PRIMERA_LINEA:  ;BUCLE PARA IMPRIMIR LA SEGUNDA LINEA
  MOV AH,2H	; IMPRIMIMOS UNO DE LOS NUMEROS DE LA PARTE SUPERIOR
  MOV DL, 9 ;ESCRIBE UN TABULACION
  INT 21H
  MOV DL, AL ;ESCRIBE AL
  INT 21H
  CMP AL, 36H
  JE NUEVA_LINEA
  INC AL
  JMP PRIMERA_LINEA

NUEVA_LINEA:
  INC CH
  CMP CH, 7
  JE IMPRIME_INSTRUCCIONES
  MOV CL, 0
  MOV DL, 10 ;ESCRIBE UN SALTO DE LINEA
  INT 21H
  MOV DL, NUM_P ; IMPRIMIMOS UNO DE LOS NUMEROS DE LA PARTE LATERAL
  INT 21H
  INC NUM_P
NUEVO_NUMERO:
  MOV DL, 9 ;ESCRIBE UN TABULACION
  INT 21H
  MOV DL, BL ; IMPRIMIMOS UN CARACTER DE DENTRO DE LA TABLA
  INT 21H
  INC BL
  CMP BL, LAST_LET
  JNE CONT_NUM
  MOV BL, INI_NUM

CONT_NUM:
  CMP CL, 5
  JE NUEVA_LINEA ;SALTAMOS A LA IMPRESION DE NUEVA LINEA
  INC CL
  CMP BL, LAST_NUM
  JNE NUEVO_NUMERO
  MOV BL, FIRST_LET
  JMP NUEVO_NUMERO

IMPRIME_INSTRUCCIONES:
  MOV AH, 2H
  MOV DL, 10 ;ESCRIBE UN SALTO DE LINEA
  INT 21H
  MOV AH, 09H
  MOV DX, OFFSET INSTRUCCION
  INT 21H
  MOV AH, 2H
  MOV DL, 10 ;ESCRIBE UN SALTO DE LINEA
  INT 21H

BUCLE_TRADUCCION:
  MOV AH, 0AH
  MOV DX, OFFSET CADENA
  MOV CADENA[0], 97 ;NUMERO MAXIMO DE CARACTERES
  INT 21h
  XOR BX, BX

  MOV SI, 2
  CMP CADENA[SI], 'd' ;SI EL PRIMER CARACTER INTRODUCIDO POR TECLADO ES d COMPROBAMOS SI SE HA ESCRITO decod
  JE COMPRUEBA_DECOD
  CMP CADENA[SI], 'c' ;SI EL PRIMER CARACTER INTRODUCIDO POR TECLADO ES c COMPROBAMOS SI SE HA ESCRITO cod
  JE COMPRUEBA_COD
  CMP CADENA[SI], 'q' ;SI EL PRIMER CARACTER INTRODUCIDO POR TECLADO ES q COMPROBAMOS SI SE HA ESCRITO quit
  JE COMPRUEBA_QUIT


COMPRUEBA_DECOD: ;COMPROBAMOS QUE SE HA ESCRITO decod + cadena
  MOV AL, 1 ;PONEMOS A 1 AL PARA INDICAR QUE ESTAMOS EN DECOD
  INC SI
  CMP CADENA[SI], 'e'
  JNE ERROR_DETECTADO
  INC SI
  CMP CADENA[SI], 'c'
  JNE ERROR_DETECTADO
  INC SI
  CMP CADENA[SI], 'o'
  JNE ERROR_DETECTADO
  INC SI
  CMP CADENA[SI], 'd'
  JNE ERROR_DETECTADO
  INC SI
  CMP CADENA[SI], 32
  JNE ERROR_DETECTADO
  INC SI
  CMP CADENA[SI], 'q'
  JE ERROR_QUIT
  CMP CADENA[SI], 'c'
  JNE CORRECTO
  JMP ERROR_COD

ERROR_DETECTADO:
  XOR BX, BX
  MOV AH, 2H
  MOV DL, 10 ;ESCRIBE UN SALTO DE LINEA
  INT 21H
  MOV AH, 09H
  MOV DX, OFFSET ERROR ;DADO QUE EL ARGUMENTO INICIAL NO ERA VALIDO, IMPRIME UN MENSAJE DE ERROR
  INT 21H
  JMP IMPRIME_INSTRUCCIONES

COMPRUEBA_QUIT: ;COMPROBAMOS QUE SE HA ESCRITO quit
  INC SI
  CMP CADENA[SI], 'u'
  JNE ERROR_DETECTADO
  INC SI
  CMP CADENA[SI], 'i'
  JNE ERROR_DETECTADO
  INC SI
  CMP CADENA[SI], 't'
  JNE ERROR_DETECTADO
  INC SI
  CMP CADENA[SI], 13 ;COMPROBAMOS SI HAY UN RETORNO DE CARRO QUE ES LO QUE NOS INDICA EL FINAL DE CADENA
  JNE ERROR_DETECTADO
  JMP FIN

COMPRUEBA_COD: ;COMPROBAMOS QUE SE HA ESCRITO cod + cadena
  MOV AL, 2 ;PONEMOS A 2 AL PARA INDICAR QUE ESTAMOS EN COD
  INC SI
  CMP CADENA[SI], 'o'
  JNE ERROR_DETECTADO
  INC SI
  CMP CADENA[SI], 'd'
  JNE ERROR_DETECTADO
  INC SI
  CMP CADENA[SI], 32
  JE CONTINUAC
  JMP ERROR_DETECTADO
CONTINUAC:
  INC SI
  CMP CADENA[SI], 'q'
  JE ERROR_QUIT
  CMP CADENA[SI], 'd'
  JE ERROR_DECOD
  JMP CORRECTO

CORRECTO: ;LA CADENA INICIAL ES CORRECTA Y VAMOS EMPLEAR LOS PROGRAMAS RESIDENTES
  CMP AL, 1 ;SI LA 'BANDERA' ESTA A 1 DEBERA DECODIFICAR
  JE CORRECTO_DECOD
  JMP CORRECTO_COD ;SI LA 'BANDERA' ESTA A 2 DEBERA CODIFICAR

ERROR_QUIT: ;COMPRUEBA QUE NO SE HA ESCRITO QUIT, SI LO HA ESCRITO DEVUELVE ERROR
  INC BX
  CMP CADENA[SI][BX], 'u'
  JNE CORRECTO
  INC BX
  CMP CADENA[SI][BX], 'i'
  JNE CORRECTO
  INC BX
  CMP CADENA[SI][BX], 't'
  JNE CORRECTO
  INC BX
  CMP CADENA[SI][BX], 13 ;COMPROBAMOS SI HAY UN RETORNO DE CARRO QUE ES LO QUE NOS INDICA EL FINAL DE CADENA
  JNE CORRECTO
  JMP ERROR_DETECTADO

ERROR_DECOD: ;COMPRUEBA QUE NO SE HA ESCRITO DECOD, SI LO HA ESCRITO DEVUELVE ERROR
  INC BX
  CMP CADENA[SI][BX], 'e'
  JNE CORRECTO
  INC BX
  CMP CADENA[SI][BX], 'c'
  JNE CORRECTO
  INC BX
  CMP CADENA[SI][BX], 'o'
  JNE CORRECTO
  INC BX
  CMP CADENA[SI][BX], 'd'
  JNE CORRECTO
  INC BX
  CMP CADENA[SI][BX], 13 ;COMPROBAMOS SI HAY UN RETORNO DE CARRO QUE ES LO QUE NOS INDICA EL FINAL DE CADENA
  JNE CORRECTO
  JMP ERROR_DETECTADO

ERROR_COD: ;COMPRUEBA QUE NO SE HA ESCRITO COD, SI LO HA ESCRITO DEVUELVE ERROR
  INC BX
  CMP CADENA[SI][BX], 'o'
  JNE CORRECTO
  INC BX
  CMP CADENA[SI][BX], 'd'
  JNE CORRECTO
  INC BX
  CMP CADENA[SI][BX], 13 ;COMPROBAMOS SI HAY UN RETORNO DE CARRO QUE ES LO QUE NOS INDICA EL FINAL DE CADENA
  JNE CORRECTO
  JMP ERROR_DETECTADO

CORRECTO_COD: ;LLAMAMOS A LA INTERRUPCION 57h CON AH = 10H PARA CODIFICAR LA CADENA
  MOV AX, SEG CADENA
  MOV DS, AX
  MOV DX, OFFSET CADENA
  ADD DX, SI
  MOV AH, 10h
  INT 57h
  JMP IMPRIME_INSTRUCCIONES

CORRECTO_DECOD: ;LLAMAMOS A LA INTERRUPCION 57h CON AH = 11H PARA DECODIFICAR LA CADENA
  MOV AX, SEG CADENA
  MOV DS, AX
  MOV DX, OFFSET CADENA
  ADD DX, SI
  MOV AH, 11h
  INT 57h
  JMP IMPRIME_INSTRUCCIONES

FIN:  ; FIN DEL PROGRAMA
  MOV AX, 4C00H
  INT 21H

START ENDP
; FIN DEL SEGMENTO DE CODIGO
CODE ENDS
; FIN DEL PROGRAMA INDICANDO DONDE COMIENZA LA EJECUCION
END START
